//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.28 at 01:59:17 PM AEDT 
//


package V5_report;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}CommonNonStringFormatAttributes"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}CommonFormatAttributes"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "format")
public class Format {

    @XmlAttribute(name = "digitShaping")
    protected String digitShaping;
    @XmlAttribute(name = "pattern")
    protected String pattern;
    @XmlAttribute(name = "whenMissing")
    protected String whenMissing;
    @XmlAttribute(name = "whenSecurityError")
    protected String whenSecurityError;
    @XmlAttribute(name = "whenNotApplicable")
    protected String whenNotApplicable;
    @XmlAttribute(name = "whenAnyError")
    protected String whenAnyError;

    /**
     * Gets the value of the digitShaping property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDigitShaping() {
        return digitShaping;
    }

    /**
     * Sets the value of the digitShaping property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDigitShaping(String value) {
        this.digitShaping = value;
    }

    /**
     * Gets the value of the pattern property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Sets the value of the pattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPattern(String value) {
        this.pattern = value;
    }

    /**
     * Gets the value of the whenMissing property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhenMissing() {
        return whenMissing;
    }

    /**
     * Sets the value of the whenMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhenMissing(String value) {
        this.whenMissing = value;
    }

    /**
     * Gets the value of the whenSecurityError property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhenSecurityError() {
        return whenSecurityError;
    }

    /**
     * Sets the value of the whenSecurityError property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhenSecurityError(String value) {
        this.whenSecurityError = value;
    }

    /**
     * Gets the value of the whenNotApplicable property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhenNotApplicable() {
        return whenNotApplicable;
    }

    /**
     * Sets the value of the whenNotApplicable property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhenNotApplicable(String value) {
        this.whenNotApplicable = value;
    }

    /**
     * Gets the value of the whenAnyError property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhenAnyError() {
        return whenAnyError;
    }

    /**
     * Sets the value of the whenAnyError property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhenAnyError(String value) {
        this.whenAnyError = value;
    }

}
