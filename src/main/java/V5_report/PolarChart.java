//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.28 at 01:59:17 PM AEDT 
//


package V5_report;

import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}defaultChartMeasure" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}radialMeasure" minOccurs="0"/>
 *         &lt;element name="angularMeasure" type="{http://developer.cognos.com/schemas/report/11.0/}ChartMeasureType" minOccurs="0"/>
 *         &lt;element name="numericalAxisAngular" type="{http://developer.cognos.com/schemas/report/11.0/}MeasureAxisType" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}numericalAxisRadial" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}points" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}pointClusters" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartBody" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartFooter" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartPalette" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartSubTitle" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartTitle" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}pointChartMarkers" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}notes" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}style" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}conditionalStyles" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}conditionalStyleRefs" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}conditionalRender" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}XMLAttributes" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}legend" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}reportDrills" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}pointChartBaselines" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}conditionalChartColors" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}masterDetailLinks" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}noDataHandler" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}chartSuppress" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}alternateText" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}appOnSelectSetVariableValues" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}appDrills" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}appContainerSelect" minOccurs="0"/>
 *         &lt;element ref="{http://developer.cognos.com/schemas/report/11.0/}appChartProperties" minOccurs="0"/>
 *       &lt;/all>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}StandardChartAttributes"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}DisplayDataLocation"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}PointChartDataPointAttributes"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}SpiderEffects"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}BorderProperties"/>
 *       &lt;attGroup ref="{http://developer.cognos.com/schemas/report/11.0/}ShowPointValues"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "polarChart")
public class PolarChart {

    protected ChartMeasureType defaultChartMeasure;
    protected ChartMeasureType radialMeasure;
    protected ChartMeasureType angularMeasure;
    protected MeasureAxisType numericalAxisAngular;
    protected MeasureAxisType numericalAxisRadial;
    protected Points points;
    protected PointClusters pointClusters;
    protected ChartBody chartBody;
    protected ChartFooter chartFooter;
    protected ChartPalette chartPalette;
    protected ChartSubTitle chartSubTitle;
    protected ChartTitle chartTitle;
    protected PointChartMarkers pointChartMarkers;
    protected Notes notes;
    protected Style style;
    protected ConditionalStyles conditionalStyles;
    protected ConditionalStyleRefs conditionalStyleRefs;
    protected ConditionalRender conditionalRender;
    @XmlElement(name = "XMLAttributes")
    protected XMLAttributes xmlAttributes;
    protected Legend legend;
    protected ReportDrills reportDrills;
    protected PointChartBaselines pointChartBaselines;
    protected ConditionalChartColors conditionalChartColors;
    protected MasterDetailLinks masterDetailLinks;
    protected NoDataHandler noDataHandler;
    protected ChartSuppress chartSuppress;
    protected LocalizedTextType alternateText;
    protected AppOnSelectSetVariableValues appOnSelectSetVariableValues;
    protected AppDrills appDrills;
    protected AppContainerSelect appContainerSelect;
    protected AppChartProperties appChartProperties;
    @XmlAttribute(name = "refQuery", required = true)
    protected String refQuery;
    @XmlAttribute(name = "showTooltips")
    protected Boolean showTooltips;
    @XmlAttribute(name = "maxHotspots")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger maxHotspots;
    @XmlAttribute(name = "displayForOrientation")
    protected String displayForOrientation;
    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "repeatEveryPage")
    protected Boolean repeatEveryPage;
    @XmlAttribute(name = "renderPageWhenEmpty")
    protected Boolean renderPageWhenEmpty;
    @XmlAttribute(name = "displayDataLocation")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String displayDataLocation;
    @XmlAttribute(name = "dataPointSize")
    protected BigDecimal dataPointSize;
    @XmlAttribute(name = "pointChartDataPointShape")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String pointChartDataPointShape;
    @XmlAttribute(name = "useSpiderEffects")
    protected Boolean useSpiderEffects;
    @XmlAttribute(name = "showBorders")
    protected Boolean showBorders;
    @XmlAttribute(name = "borderColor")
    protected String borderColor;
    @XmlAttribute(name = "borderTransparency")
    protected BigDecimal borderTransparency;
    @XmlAttribute(name = "showPointValues")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String showPointValues;
    @XmlAttribute(name = "showPointValuesForPoints")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String showPointValuesForPoints;
    @XmlAttribute(name = "showPointValuesForPointClusters")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String showPointValuesForPointClusters;

    /**
     * Gets the value of the defaultChartMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link ChartMeasureType }
     *     
     */
    public ChartMeasureType getDefaultChartMeasure() {
        return defaultChartMeasure;
    }

    /**
     * Sets the value of the defaultChartMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartMeasureType }
     *     
     */
    public void setDefaultChartMeasure(ChartMeasureType value) {
        this.defaultChartMeasure = value;
    }

    /**
     * Gets the value of the radialMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link ChartMeasureType }
     *     
     */
    public ChartMeasureType getRadialMeasure() {
        return radialMeasure;
    }

    /**
     * Sets the value of the radialMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartMeasureType }
     *     
     */
    public void setRadialMeasure(ChartMeasureType value) {
        this.radialMeasure = value;
    }

    /**
     * Gets the value of the angularMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link ChartMeasureType }
     *     
     */
    public ChartMeasureType getAngularMeasure() {
        return angularMeasure;
    }

    /**
     * Sets the value of the angularMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartMeasureType }
     *     
     */
    public void setAngularMeasure(ChartMeasureType value) {
        this.angularMeasure = value;
    }

    /**
     * Gets the value of the numericalAxisAngular property.
     * 
     * @return
     *     possible object is
     *     {@link MeasureAxisType }
     *     
     */
    public MeasureAxisType getNumericalAxisAngular() {
        return numericalAxisAngular;
    }

    /**
     * Sets the value of the numericalAxisAngular property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeasureAxisType }
     *     
     */
    public void setNumericalAxisAngular(MeasureAxisType value) {
        this.numericalAxisAngular = value;
    }

    /**
     * Gets the value of the numericalAxisRadial property.
     * 
     * @return
     *     possible object is
     *     {@link MeasureAxisType }
     *     
     */
    public MeasureAxisType getNumericalAxisRadial() {
        return numericalAxisRadial;
    }

    /**
     * Sets the value of the numericalAxisRadial property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeasureAxisType }
     *     
     */
    public void setNumericalAxisRadial(MeasureAxisType value) {
        this.numericalAxisRadial = value;
    }

    /**
     * Gets the value of the points property.
     * 
     * @return
     *     possible object is
     *     {@link Points }
     *     
     */
    public Points getPoints() {
        return points;
    }

    /**
     * Sets the value of the points property.
     * 
     * @param value
     *     allowed object is
     *     {@link Points }
     *     
     */
    public void setPoints(Points value) {
        this.points = value;
    }

    /**
     * Gets the value of the pointClusters property.
     * 
     * @return
     *     possible object is
     *     {@link PointClusters }
     *     
     */
    public PointClusters getPointClusters() {
        return pointClusters;
    }

    /**
     * Sets the value of the pointClusters property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointClusters }
     *     
     */
    public void setPointClusters(PointClusters value) {
        this.pointClusters = value;
    }

    /**
     * Gets the value of the chartBody property.
     * 
     * @return
     *     possible object is
     *     {@link ChartBody }
     *     
     */
    public ChartBody getChartBody() {
        return chartBody;
    }

    /**
     * Sets the value of the chartBody property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartBody }
     *     
     */
    public void setChartBody(ChartBody value) {
        this.chartBody = value;
    }

    /**
     * Gets the value of the chartFooter property.
     * 
     * @return
     *     possible object is
     *     {@link ChartFooter }
     *     
     */
    public ChartFooter getChartFooter() {
        return chartFooter;
    }

    /**
     * Sets the value of the chartFooter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartFooter }
     *     
     */
    public void setChartFooter(ChartFooter value) {
        this.chartFooter = value;
    }

    /**
     * Gets the value of the chartPalette property.
     * 
     * @return
     *     possible object is
     *     {@link ChartPalette }
     *     
     */
    public ChartPalette getChartPalette() {
        return chartPalette;
    }

    /**
     * Sets the value of the chartPalette property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartPalette }
     *     
     */
    public void setChartPalette(ChartPalette value) {
        this.chartPalette = value;
    }

    /**
     * Gets the value of the chartSubTitle property.
     * 
     * @return
     *     possible object is
     *     {@link ChartSubTitle }
     *     
     */
    public ChartSubTitle getChartSubTitle() {
        return chartSubTitle;
    }

    /**
     * Sets the value of the chartSubTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartSubTitle }
     *     
     */
    public void setChartSubTitle(ChartSubTitle value) {
        this.chartSubTitle = value;
    }

    /**
     * Gets the value of the chartTitle property.
     * 
     * @return
     *     possible object is
     *     {@link ChartTitle }
     *     
     */
    public ChartTitle getChartTitle() {
        return chartTitle;
    }

    /**
     * Sets the value of the chartTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartTitle }
     *     
     */
    public void setChartTitle(ChartTitle value) {
        this.chartTitle = value;
    }

    /**
     * Gets the value of the pointChartMarkers property.
     * 
     * @return
     *     possible object is
     *     {@link PointChartMarkers }
     *     
     */
    public PointChartMarkers getPointChartMarkers() {
        return pointChartMarkers;
    }

    /**
     * Sets the value of the pointChartMarkers property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointChartMarkers }
     *     
     */
    public void setPointChartMarkers(PointChartMarkers value) {
        this.pointChartMarkers = value;
    }

    /**
     * Gets the value of the notes property.
     * 
     * @return
     *     possible object is
     *     {@link Notes }
     *     
     */
    public Notes getNotes() {
        return notes;
    }

    /**
     * Sets the value of the notes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Notes }
     *     
     */
    public void setNotes(Notes value) {
        this.notes = value;
    }

    /**
     * Gets the value of the style property.
     * 
     * @return
     *     possible object is
     *     {@link Style }
     *     
     */
    public Style getStyle() {
        return style;
    }

    /**
     * Sets the value of the style property.
     * 
     * @param value
     *     allowed object is
     *     {@link Style }
     *     
     */
    public void setStyle(Style value) {
        this.style = value;
    }

    /**
     * Gets the value of the conditionalStyles property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionalStyles }
     *     
     */
    public ConditionalStyles getConditionalStyles() {
        return conditionalStyles;
    }

    /**
     * Sets the value of the conditionalStyles property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionalStyles }
     *     
     */
    public void setConditionalStyles(ConditionalStyles value) {
        this.conditionalStyles = value;
    }

    /**
     * Gets the value of the conditionalStyleRefs property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionalStyleRefs }
     *     
     */
    public ConditionalStyleRefs getConditionalStyleRefs() {
        return conditionalStyleRefs;
    }

    /**
     * Sets the value of the conditionalStyleRefs property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionalStyleRefs }
     *     
     */
    public void setConditionalStyleRefs(ConditionalStyleRefs value) {
        this.conditionalStyleRefs = value;
    }

    /**
     * Gets the value of the conditionalRender property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionalRender }
     *     
     */
    public ConditionalRender getConditionalRender() {
        return conditionalRender;
    }

    /**
     * Sets the value of the conditionalRender property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionalRender }
     *     
     */
    public void setConditionalRender(ConditionalRender value) {
        this.conditionalRender = value;
    }

    /**
     * Gets the value of the xmlAttributes property.
     * 
     * @return
     *     possible object is
     *     {@link XMLAttributes }
     *     
     */
    public XMLAttributes getXMLAttributes() {
        return xmlAttributes;
    }

    /**
     * Sets the value of the xmlAttributes property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLAttributes }
     *     
     */
    public void setXMLAttributes(XMLAttributes value) {
        this.xmlAttributes = value;
    }

    /**
     * Gets the value of the legend property.
     * 
     * @return
     *     possible object is
     *     {@link Legend }
     *     
     */
    public Legend getLegend() {
        return legend;
    }

    /**
     * Sets the value of the legend property.
     * 
     * @param value
     *     allowed object is
     *     {@link Legend }
     *     
     */
    public void setLegend(Legend value) {
        this.legend = value;
    }

    /**
     * Gets the value of the reportDrills property.
     * 
     * @return
     *     possible object is
     *     {@link ReportDrills }
     *     
     */
    public ReportDrills getReportDrills() {
        return reportDrills;
    }

    /**
     * Sets the value of the reportDrills property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReportDrills }
     *     
     */
    public void setReportDrills(ReportDrills value) {
        this.reportDrills = value;
    }

    /**
     * Gets the value of the pointChartBaselines property.
     * 
     * @return
     *     possible object is
     *     {@link PointChartBaselines }
     *     
     */
    public PointChartBaselines getPointChartBaselines() {
        return pointChartBaselines;
    }

    /**
     * Sets the value of the pointChartBaselines property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointChartBaselines }
     *     
     */
    public void setPointChartBaselines(PointChartBaselines value) {
        this.pointChartBaselines = value;
    }

    /**
     * Gets the value of the conditionalChartColors property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionalChartColors }
     *     
     */
    public ConditionalChartColors getConditionalChartColors() {
        return conditionalChartColors;
    }

    /**
     * Sets the value of the conditionalChartColors property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionalChartColors }
     *     
     */
    public void setConditionalChartColors(ConditionalChartColors value) {
        this.conditionalChartColors = value;
    }

    /**
     * Gets the value of the masterDetailLinks property.
     * 
     * @return
     *     possible object is
     *     {@link MasterDetailLinks }
     *     
     */
    public MasterDetailLinks getMasterDetailLinks() {
        return masterDetailLinks;
    }

    /**
     * Sets the value of the masterDetailLinks property.
     * 
     * @param value
     *     allowed object is
     *     {@link MasterDetailLinks }
     *     
     */
    public void setMasterDetailLinks(MasterDetailLinks value) {
        this.masterDetailLinks = value;
    }

    /**
     * Gets the value of the noDataHandler property.
     * 
     * @return
     *     possible object is
     *     {@link NoDataHandler }
     *     
     */
    public NoDataHandler getNoDataHandler() {
        return noDataHandler;
    }

    /**
     * Sets the value of the noDataHandler property.
     * 
     * @param value
     *     allowed object is
     *     {@link NoDataHandler }
     *     
     */
    public void setNoDataHandler(NoDataHandler value) {
        this.noDataHandler = value;
    }

    /**
     * Gets the value of the chartSuppress property.
     * 
     * @return
     *     possible object is
     *     {@link ChartSuppress }
     *     
     */
    public ChartSuppress getChartSuppress() {
        return chartSuppress;
    }

    /**
     * Sets the value of the chartSuppress property.
     * 
     * @param value
     *     allowed object is
     *     {@link ChartSuppress }
     *     
     */
    public void setChartSuppress(ChartSuppress value) {
        this.chartSuppress = value;
    }

    /**
     * Gets the value of the alternateText property.
     * 
     * @return
     *     possible object is
     *     {@link LocalizedTextType }
     *     
     */
    public LocalizedTextType getAlternateText() {
        return alternateText;
    }

    /**
     * Sets the value of the alternateText property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocalizedTextType }
     *     
     */
    public void setAlternateText(LocalizedTextType value) {
        this.alternateText = value;
    }

    /**
     * Gets the value of the appOnSelectSetVariableValues property.
     * 
     * @return
     *     possible object is
     *     {@link AppOnSelectSetVariableValues }
     *     
     */
    public AppOnSelectSetVariableValues getAppOnSelectSetVariableValues() {
        return appOnSelectSetVariableValues;
    }

    /**
     * Sets the value of the appOnSelectSetVariableValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link AppOnSelectSetVariableValues }
     *     
     */
    public void setAppOnSelectSetVariableValues(AppOnSelectSetVariableValues value) {
        this.appOnSelectSetVariableValues = value;
    }

    /**
     * Gets the value of the appDrills property.
     * 
     * @return
     *     possible object is
     *     {@link AppDrills }
     *     
     */
    public AppDrills getAppDrills() {
        return appDrills;
    }

    /**
     * Sets the value of the appDrills property.
     * 
     * @param value
     *     allowed object is
     *     {@link AppDrills }
     *     
     */
    public void setAppDrills(AppDrills value) {
        this.appDrills = value;
    }

    /**
     * Gets the value of the appContainerSelect property.
     * 
     * @return
     *     possible object is
     *     {@link AppContainerSelect }
     *     
     */
    public AppContainerSelect getAppContainerSelect() {
        return appContainerSelect;
    }

    /**
     * Sets the value of the appContainerSelect property.
     * 
     * @param value
     *     allowed object is
     *     {@link AppContainerSelect }
     *     
     */
    public void setAppContainerSelect(AppContainerSelect value) {
        this.appContainerSelect = value;
    }

    /**
     * Gets the value of the appChartProperties property.
     * 
     * @return
     *     possible object is
     *     {@link AppChartProperties }
     *     
     */
    public AppChartProperties getAppChartProperties() {
        return appChartProperties;
    }

    /**
     * Sets the value of the appChartProperties property.
     * 
     * @param value
     *     allowed object is
     *     {@link AppChartProperties }
     *     
     */
    public void setAppChartProperties(AppChartProperties value) {
        this.appChartProperties = value;
    }

    /**
     * Gets the value of the refQuery property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRefQuery() {
        return refQuery;
    }

    /**
     * Sets the value of the refQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRefQuery(String value) {
        this.refQuery = value;
    }

    /**
     * Gets the value of the showTooltips property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isShowTooltips() {
        if (showTooltips == null) {
            return false;
        } else {
            return showTooltips;
        }
    }

    /**
     * Sets the value of the showTooltips property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setShowTooltips(Boolean value) {
        this.showTooltips = value;
    }

    /**
     * Gets the value of the maxHotspots property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxHotspots() {
        return maxHotspots;
    }

    /**
     * Sets the value of the maxHotspots property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxHotspots(BigInteger value) {
        this.maxHotspots = value;
    }

    /**
     * Gets the value of the displayForOrientation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayForOrientation() {
        if (displayForOrientation == null) {
            return "both";
        } else {
            return displayForOrientation;
        }
    }

    /**
     * Sets the value of the displayForOrientation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDisplayForOrientation(String value) {
        this.displayForOrientation = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the repeatEveryPage property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isRepeatEveryPage() {
        if (repeatEveryPage == null) {
            return false;
        } else {
            return repeatEveryPage;
        }
    }

    /**
     * Sets the value of the repeatEveryPage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRepeatEveryPage(Boolean value) {
        this.repeatEveryPage = value;
    }

    /**
     * Gets the value of the renderPageWhenEmpty property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isRenderPageWhenEmpty() {
        if (renderPageWhenEmpty == null) {
            return true;
        } else {
            return renderPageWhenEmpty;
        }
    }

    /**
     * Sets the value of the renderPageWhenEmpty property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRenderPageWhenEmpty(Boolean value) {
        this.renderPageWhenEmpty = value;
    }

    /**
     * Gets the value of the displayDataLocation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayDataLocation() {
        if (displayDataLocation == null) {
            return "centered";
        } else {
            return displayDataLocation;
        }
    }

    /**
     * Sets the value of the displayDataLocation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDisplayDataLocation(String value) {
        this.displayDataLocation = value;
    }

    /**
     * Gets the value of the dataPointSize property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDataPointSize() {
        if (dataPointSize == null) {
            return new BigDecimal("6");
        } else {
            return dataPointSize;
        }
    }

    /**
     * Sets the value of the dataPointSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setDataPointSize(BigDecimal value) {
        this.dataPointSize = value;
    }

    /**
     * Gets the value of the pointChartDataPointShape property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPointChartDataPointShape() {
        if (pointChartDataPointShape == null) {
            return "series";
        } else {
            return pointChartDataPointShape;
        }
    }

    /**
     * Sets the value of the pointChartDataPointShape property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPointChartDataPointShape(String value) {
        this.pointChartDataPointShape = value;
    }

    /**
     * Gets the value of the useSpiderEffects property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isUseSpiderEffects() {
        if (useSpiderEffects == null) {
            return false;
        } else {
            return useSpiderEffects;
        }
    }

    /**
     * Sets the value of the useSpiderEffects property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUseSpiderEffects(Boolean value) {
        this.useSpiderEffects = value;
    }

    /**
     * Gets the value of the showBorders property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isShowBorders() {
        if (showBorders == null) {
            return false;
        } else {
            return showBorders;
        }
    }

    /**
     * Sets the value of the showBorders property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setShowBorders(Boolean value) {
        this.showBorders = value;
    }

    /**
     * Gets the value of the borderColor property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBorderColor() {
        if (borderColor == null) {
            return "black";
        } else {
            return borderColor;
        }
    }

    /**
     * Sets the value of the borderColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBorderColor(String value) {
        this.borderColor = value;
    }

    /**
     * Gets the value of the borderTransparency property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getBorderTransparency() {
        if (borderTransparency == null) {
            return new BigDecimal("0");
        } else {
            return borderTransparency;
        }
    }

    /**
     * Sets the value of the borderTransparency property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setBorderTransparency(BigDecimal value) {
        this.borderTransparency = value;
    }

    /**
     * Gets the value of the showPointValues property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShowPointValues() {
        if (showPointValues == null) {
            return "none";
        } else {
            return showPointValues;
        }
    }

    /**
     * Sets the value of the showPointValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShowPointValues(String value) {
        this.showPointValues = value;
    }

    /**
     * Gets the value of the showPointValuesForPoints property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShowPointValuesForPoints() {
        if (showPointValuesForPoints == null) {
            return "none";
        } else {
            return showPointValuesForPoints;
        }
    }

    /**
     * Sets the value of the showPointValuesForPoints property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShowPointValuesForPoints(String value) {
        this.showPointValuesForPoints = value;
    }

    /**
     * Gets the value of the showPointValuesForPointClusters property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShowPointValuesForPointClusters() {
        if (showPointValuesForPointClusters == null) {
            return "none";
        } else {
            return showPointValuesForPointClusters;
        }
    }

    /**
     * Sets the value of the showPointValuesForPointClusters property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShowPointValuesForPointClusters(String value) {
        this.showPointValuesForPointClusters = value;
    }

}
